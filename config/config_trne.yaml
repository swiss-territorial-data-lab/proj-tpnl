# 1-Produce tiles geometry according to the AOI extent and zoom level
prepare_data.py:  
  srs: "EPSG:2056"
  datasets:
    labels_shapefile: ./input/NE/20210330-input-label-nh-hr-correction/20210330-input-label-nh-hr-correction.shp
  output_folder: ./output/output_trne
  zoom_level: 19 

# 2-Fetch of tiles (online server) and split into 3 datasets: train, test, validation
generate_tilesets.py:
  debug_mode: False
  datasets:
    aoi_tiles_geojson: ./output/output_trne/tiles.geojson
    ground_truth_labels_geojson: ./output/output_trne/labels.geojson
    orthophotos_web_service:
      type: XYZ # supported values: 1. MIL = Map Image Layer 2. WMS 3. XYZ
      url: https://wmts.geo.admin.ch/1.0.0/ch.swisstopo.swissimage-product/default/2020/3857/{z}/{x}/{y}.jpeg
      # url: https://wms.geo.admin.ch/service
      # layers: ch.swisstopo.swissimage
      # srs: "EPSG:2056"
  output_folder: ./output/output_trne
  tile_size: 256 # per side, in pixels
  overwrite: False
  n_jobs: 10
  COCO_metadata:
    year: 2021
    version: 1.0
    description: Swiss Image Hinterground w/ Thermal panel detection
    contributor: swisstopo
    url: https://swisstopo.ch
    license:
      name: Unknown
      url:
    category:
        name: "Thermal Panel"
        supercategory: "Infrastructure"

# 3-Train the model with the detectron2 algorithm
train_model.py:
    working_folder: ./output/output_trne
    log_subfolder: logs
    sample_tagged_img_subfolder: sample_tagged_images
    COCO_files: # relative paths, w/ respect to the working_folder
        trn: COCO_trn.json
        val: COCO_val.json
        tst: COCO_tst.json
    detectron2_config_file: '../../config/detectron2_config_tpnl.yaml' # path relative to the working_folder
    model_weights:
        model_zoo_checkpoint_url: "COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml"

# 4-Perform the object detection based on the optimized trained model
make_predictions.py:
    working_folder: ./output/output_trne
    log_subfolder: logs
    sample_tagged_img_subfolder: sample_tagged_images
    COCO_files: # relative paths, w/ respect to the working_folder
        trn: COCO_trn.json
        val: COCO_val.json
        tst: COCO_tst.json
    detectron2_config_file: '../../config/detectron2_config_tpnl.yaml' # path relative to the working_folder
    model_weights:
        pth_file: './logs/model_0005999.pth'
    image_metadata_json: './output/output_trne/img_metadata.json'
    rdp_simplification: # rdp = Ramer-Douglas-Peucker
      enabled: false
      epsilon: 0.5 # cf. https://rdp.readthedocs.io/en/latest/
    score_lower_threshold: 0.05

# 5-Evaluate the quality of the prediction for the different datasets with metrics calculation  
assess_predictions.py:
  datasets:
    ground_truth_labels_geojson: ./output/output_trne/labels.geojson
    image_metadata_json: ./output/output_trne/img_metadata.json
    split_aoi_tiles_geojson: ./output/output_trne/split_aoi_tiles.geojson # aoi = Area of Interest
    predictions:
      trn: ./output/output_trne/trn_predictions_at_0dot05_threshold.gpkg
      val: ./output/output_trne/val_predictions_at_0dot05_threshold.gpkg
      tst: ./output/output_trne/tst_predictions_at_0dot05_threshold.gpkg
  output_folder: ./output/output_trne



# prepare_data.py:
#   srs: "EPSG:2056"
#   tiling:
#     csv: ../input/[TILES_CSV_FILE]
#     # shapefile: ../input/[TILES_SHP_FILE]
#     split: 1
#   label:
#     shapefile: [LABELS_SHP_FILE]
#     redfact: 0.9
#   output_folder: ../output
